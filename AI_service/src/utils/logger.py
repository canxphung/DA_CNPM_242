"""
C·∫•u h√¨nh v√† qu·∫£n l√Ω h·ªá th·ªëng logging.
"""
import os
import sys
import io
import logging
import logging.handlers
from datetime import datetime

# ƒê·ªãnh d·∫°ng log m·∫∑c ƒë·ªãnh
DEFAULT_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

# K√≠ch th∆∞·ªõc t·ªëi ƒëa c·ªßa file log (10MB)
MAX_LOG_SIZE = 10 * 1024 * 1024
BACKUP_COUNT = 5


class UTF8ConsoleHandler(logging.StreamHandler):
    """
    Custom console handler ƒë·∫£m b·∫£o lu√¥n d√πng UTF-8 ƒë·ªÉ log ti·∫øng Vi·ªát kh√¥ng l·ªói.
    """
    def __init__(self):
        try:
            stream = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
        except Exception:
            stream = sys.stdout  # fallback n·∫øu kh√¥ng h·ªó tr·ª£
        super().__init__(stream)


def setup_logger(name=None, level=logging.INFO, log_file=None, format_str=None):
    """
    Thi·∫øt l·∫≠p c·∫•u h√¨nh cho m·ªôt logger c·ª• th·ªÉ.

    Args:
        name: T√™n logger (None cho root logger)
        level: M·ª©c log (INFO, DEBUG, WARNING, ERROR, CRITICAL)
        log_file: ƒê∆∞·ªùng d·∫´n t·ªõi file log (None ƒë·ªÉ ch·ªâ log ra console)
        format_str: ƒê·ªãnh d·∫°ng log

    Returns:
        Logger ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
    """
    logger = logging.getLogger(name)
    logger.setLevel(level)

    # Xo√° t·∫•t c·∫£ c√°c handler c≈©
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)

    formatter = logging.Formatter(format_str or DEFAULT_FORMAT)

    # Console logger (√©p d√πng UTF-8)
    console_handler = UTF8ConsoleHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # File logger n·∫øu c√≥
    if log_file:
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=MAX_LOG_SIZE,
            backupCount=BACKUP_COUNT,
            encoding='utf-8'  # ƒë·∫£m b·∫£o kh√¥ng l·ªói Unicode khi ghi ti·∫øng Vi·ªát
        )
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

    return logger


def setup_global_logging(log_dir='logs'):
    """
    Thi·∫øt l·∫≠p h·ªá th·ªëng logging to√†n c·ª•c cho ·ª©ng d·ª•ng.

    Args:
        log_dir: Th∆∞ m·ª•c ch·ª©a c√°c file log

    Returns:
        Root logger ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
    """
    os.makedirs(log_dir, exist_ok=True)

    current_date = datetime.now().strftime('%Y-%m-%d')
    log_file = os.path.join(log_dir, f'ai_service_{current_date}.log')

    root_logger = setup_logger(
        name=None,
        level=logging.INFO,
        log_file=log_file,
        format_str='%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s'
    )

    # Gi·∫£m ƒë·ªô ·ªìn c·ªßa c√°c th∆∞ vi·ªán b√™n ngo√†i
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('matplotlib').setLevel(logging.WARNING)

    # Ghi log kh·ªüi ƒë·ªông
    root_logger.info("=" * 60)
    root_logger.info("üéØ AI Service logging initialized")
    root_logger.info(f"üìÅ Log file: {log_file}")
    root_logger.info("=" * 60)

    return root_logger


def get_logger(name):
    """
    L·∫•y m·ªôt logger theo t√™n.

    Args:
        name: T√™n logger (th∆∞·ªùng l√† __name__ c·ªßa module)

    Returns:
        Logger v·ªõi t√™n c·ª• th·ªÉ
    """
    return logging.getLogger(name)


# T·ª± ƒë·ªông thi·∫øt l·∫≠p logger g·ªëc khi import
default_logger = setup_global_logging()
